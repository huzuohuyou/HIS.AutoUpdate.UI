@inject HttpClient Http
@using System.Text.Json;
@using HIS.AutoUpdate.Blazor.Models;
@using System;
@using System.Collections.Generic;
@using System.IO;
@using System.Runtime.Serialization.Formatters;
@inject MessageService _message
@using System.ComponentModel.DataAnnotations;
@using Microsoft.Extensions.Options;
@using System.Text.RegularExpressions;
@inject IJSRuntime JSRuntime;
@inject NotificationService _notice
@inject IOptionsSnapshot<MyProSettings> MyProSettings;
@*@inject IOptionsSnapshot<Server[]> Servers;*@




<Form Model="@column"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      LabelColSpan="8"
      WrapperColSpan="16">
    @*<FormItem Label="IP">
            <Badge Color="green" Text="@item.IP"></Badge>
        </FormItem>*@
    @*<FormItem Label="配置文件">
            <Input Disabled Placeholder="configFileName" @bind-Value="@item.ConfigFileName" />
        </FormItem>

        <FormItem Label="模块">
            <Input Disabled Placeholder="settingsSection" @bind-Value="@item.SettingsSectionName" />
        </FormItem>*@
     <FormItem Label="版本变更">
                <Input Placeholder="CurrentVersionURL" @bind-Value="@Client.Columns.FirstOrDefault().CurrentVersionURL" />
            </FormItem>
    @foreach (var item in Client.Columns)
    {
        @if (Client.Columns.IndexOf(item) == 0)
        {
            <FormItem Label="@item.IP">
                <Upload Action=@item.ClientUploadUri
                        Name="files"
                        Accept=".zip"
                        @bind-FileList="fileList"
                        ShowButton="fileList?.Count < 1"
                        Data="dict"
                        ListType="picture-card"
                        OnChange="HandleChange">
                    <div>
                        <Icon Type="plus"></Icon>
                        <div className="ant-upload-text">Upload</div>
                    </div>
                </Upload>

            </FormItem>
        }
        else if (Client.Columns.IndexOf(item) == 1)
        {
            <FormItem Label="@item.IP">
                <Upload Action=@item.ClientUploadUri
                        Name="files"
                        Accept=".zip"
                        @bind-FileList="fileList2"
                        ShowButton="fileList2?.Count < 1"
                        Data="dict"
                        ListType="picture-card"
                        OnChange="HandleChange2">
                    <div>
                        <Icon Type="plus"></Icon>
                        <div className="ant-upload-text">Upload</div>
                    </div>
                </Upload>

            </FormItem>
        }
        else if (Client.Columns.IndexOf(item) == 2)
        {
            <FormItem Label="@item.IP">
                <Upload Action=@item.ClientUploadUri
                        Name="files"
                        Accept=".zip"
                        @bind-FileList="fileList3"
                        ShowButton="fileList2?.Count < 1"
                        Data="dict"
                        ListType="picture-card"
                        OnChange="HandleChange3">
                    <div>
                        <Icon Type="plus"></Icon>
                        <div className="ant-upload-text">Upload</div>
                    </div>
                </Upload>
            </FormItem>
        }

    }
        <FormItem WrapperColOffset="8" WrapperColSpan="16">
            <Button Type="@ButtonType.Primary" HtmlType="submit">
                提交
            </Button>
        </FormItem>
    </Form>






@code
{
    //[Parameter]
    //public Column currentColumn { get; set; }

    [Parameter]
    public Client Client { get; set; }
    List<UploadFileItem> fileList = new List<UploadFileItem> { };
    List<UploadFileItem> fileList2 = new List<UploadFileItem> { };
    List<UploadFileItem> fileList3 = new List<UploadFileItem> { };
    Dictionary<string, object> dict = new Dictionary<string, object>() { { "configFileName", @"" } };
    Column column { get; set; } = new Column();

    protected override void OnInitialized()
    {
        dict["configFileName"] = Client.Columns.FirstOrDefault().ConfigFileName;
        base.OnInitialized();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        dict["configFileName"] = Client.Columns.FirstOrDefault().ConfigFileName;
        base.OnAfterRender(firstRender);
    }

    private async Task NoticeWithIcon(NotificationType type, string Message, string Description)
    {
        await _notice.Open(new NotificationConfig()
        {
            Message = Message,
            Duration = 0,
            Description = Description,
            NotificationType = type
        });
    }

    private async Task OnFinish(EditContext editContext)
    {
        try
        {
            foreach (var item in Client.Columns)
            {
                try
                {
                    var createUpdateModel = new CreateUpdateModel()
                    {
                        configFileName = item.ConfigFileName,
                        settingsSection = new Dictionary<string, CurrentVersionURL>() {
                            { item.SettingsSectionName, new CurrentVersionURL() { currentVersionURL = item.CurrentVersionURL } }
                        }
                    };
                    var result = await Http.PostAsJsonAsync<CreateUpdateModel>($@"{item.WebApiUri}/api/ConfigurationManager", createUpdateModel);
                    if (result.IsSuccessStatusCode)
                    {
                        await NoticeWithIcon(NotificationType.Success, "更新配置", $@"{item.WebApiUri}配置成功！！！");
                    }
                    else
                    {
                        await NoticeWithIcon(NotificationType.Warning, "更新配置", $@"{item.WebApiUri}配置失败！！！");
                    }
                }
                catch (Exception ex)
                {
                    await NoticeWithIcon(NotificationType.Error, "异常", $@"{item.WebApiUri}-{item.SettingsSectionName}-{ex.Message}");
                }
            }
        }
        catch (Exception ex)
        {

            await NoticeWithIcon(NotificationType.Error, "异常", ex.Message);
        }

    }

    private void OnFinishFailed(EditContext editContext)
    {

    }


    async Task HandleChange(UploadInfo fileinfo)
    {
        try
        {
            if (fileinfo.File.State == UploadState.Success)
            {
                Match m1 = Regex.Match(fileinfo.File.FileName ?? "", @"(?<=_).*?(?=.zip)");
                foreach (var item in Client.Columns)
                {
                    item.CurrentVersionURL = $@"{ m1?.ToString()}|{fileinfo.File.FileName}";
                }
                await NoticeWithIcon(NotificationType.Success, "操作", "上传成功！！");
                fileinfo.File.Url = fileinfo.File.ObjectURL;
            }
            else if (fileinfo.File.State == UploadState.Fail)
            {
                await NoticeWithIcon(NotificationType.Warning, "失败", "上传失败！！");
            }
        }
        catch (Exception ex)
        {

            await NoticeWithIcon(NotificationType.Error, "异常", ex.Message);
        }
    }

    async Task HandleChange2(UploadInfo fileinfo)
    {
        try
        {
            if (fileinfo.File.State == UploadState.Success)
            {
                Match m1 = Regex.Match(fileinfo.File.FileName ?? "", @"(?<=_).*?(?=.zip)");
                foreach (var item in Client.Columns)
                {
                    item.CurrentVersionURL = $@"{ m1?.ToString()}|{fileinfo.File.FileName}";
                }
                await NoticeWithIcon(NotificationType.Success, "操作", "上传成功！！");
                fileinfo.File.Url = fileinfo.File.ObjectURL;
            }
            else if (fileinfo.File.State == UploadState.Fail)
            {
                await NoticeWithIcon(NotificationType.Warning, "失败", "上传失败！！");
            }
        }
        catch (Exception ex)
        {

            await NoticeWithIcon(NotificationType.Error, "异常", ex.Message);
        }
    }

    async Task HandleChange3(UploadInfo fileinfo)
    {
        try
        {
            if (fileinfo.File.State == UploadState.Success)
            {
                Match m1 = Regex.Match(fileinfo.File.FileName ?? "", @"(?<=_).*?(?=.zip)");
                foreach (var item in Client.Columns)
                {
                    item.CurrentVersionURL = $@"{ m1?.ToString()}|{fileinfo.File.FileName}";
                }
                await NoticeWithIcon(NotificationType.Success, "操作", "上传成功！！");
                fileinfo.File.Url = fileinfo.File.ObjectURL;
            }
            else if (fileinfo.File.State == UploadState.Fail)
            {
                await NoticeWithIcon(NotificationType.Warning, "失败", "上传失败！！");
            }
        }
        catch (Exception ex)
        {

            await NoticeWithIcon(NotificationType.Error, "异常", ex.Message);
        }
    }
}

<style>
    /* you can make up upload button and sample style by using stylesheets */
    .ant-upload-select-picture-card i {
        color: #999;
        font-size: 32px;
    }

    .ant-upload-select-picture-card .ant-upload-text {
        margin-top: 8px;
        color: #666;
    }
</style>
