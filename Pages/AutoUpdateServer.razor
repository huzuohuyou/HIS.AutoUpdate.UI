@page "/AutoUpdateServer"
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;
@using HIS.AutoUpdate.Blazor.Models;
@inject HttpClient Http
@using System.Text.Json.Serialization
@inject MessageService _message
@using  System.Reflection;
@using System.Text;
@using Microsoft.Extensions.Options;
@inject IOptionsSnapshot<MyProSettings> MyProSettings;
@inject NotificationService _notice

<PageContainer Title="更新HIS服务端">
    <Spin Spinning=Loading >
        <Table DataSource="Data" Bordered PageSize="100" ScrollX="800">
            <Column ColSpan="1" @bind-Field="@context.Name" Width="100" Title="站点" 
                    RowSpan="@GetRowSpan(context.Name)"
                    SorterCompare="(a,b)=>a.CompareTo(b)" />
            <Column ColSpan="1" @bind-Field="@context.IP" Width="80" Title="服务器" />
            <Column @bind-Field="@context.StateValue" Width="60" Title="网站状态">
                <Switch CheckedChildren="已启动" UnCheckedChildren="已停止" OnChange="()=>SiteStateHasChanged(context)" @bind-Value="@context.StateValue"></Switch>
            </Column>
            <Column ColSpan="1" @bind-Field="@context.PhysicalPath" Width="150" Title="目录" />
            <ActionColumn ColSpan="1" Title="网站操作" Width="60" Fixed="right" >
                <Button Type="primary" Size="small" Shape="round" Icon="upload" OnClick="()=>Config(context)">上传 </Button>

            </ActionColumn>
            <Column ColSpan="1" @bind-Field="@context.PoolName" Width="100" Title="应用程序池" />
            <Column ColSpan="1" @bind-Field="@context.PoolStateValue" Width="60" Title="程序池状态" Ellipsis>
                <Switch CheckedChildren="已启动" UnCheckedChildren="已停止" OnChange="()=>PoolStateHasChanged(context)" @bind-Value="@context.PoolStateValue"></Switch>
            </Column>
            <ActionColumn ColSpan="1" Title="程序池操作" Width="60" Fixed="right">
                <Button Type="primary" Size="small" Shape="round" Icon="redo" OnClick="()=>Recycle(context)">回收</Button>
            </ActionColumn>
        </Table>
    </Spin>
    <Modal Title="上传文件"
           Visible="@Visible"
           OnOk="@HandleOk"
           OnCancel="@HandleCancel"
           Footer="null">
        <ServerUploadFile site="@Site"></ServerUploadFile>
    </Modal>
</PageContainer>
@code
{

    bool Loading = true;
    bool Visible = false;
    int Index = 0;
    int RowSpanCount = 1;
    Site Site { get; set; }
    Site[] Data { get; set; }
    List<Site> List = new List<Site>();

    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        Visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        Visible = false;
    }

    public async Task<List<Site>> Do(string WebApiUri)
    {
        var temp = new List<Site>();
        try
        {
            var result = await Http.GetAsync($@"{ WebApiUri}/api/Sites");
            if (result.IsSuccessStatusCode)
            {
                await NoticeWithIcon(NotificationType.Success,  WebApiUri, $@"成功连接服务：{WebApiUri}");

                var resultContent = result.Content.ReadAsStringAsync().Result;
                temp = JsonSerializer.Deserialize<Site[]>(resultContent).ToList();
                temp.ForEach(r =>
                {
                    r.WebApiUri = WebApiUri;
                });
            }
        }
        catch (Exception ex)
        {
            RowSpanCount--;
            await NoticeWithIcon(NotificationType.Error,  WebApiUri, ex.Message.Equals("TypeError: Failed to fetch") ? $@"无法连接到服务:{WebApiUri}" : ex.Message);
        }
        return temp;
    }
    private async Task NoticeWithIcon(NotificationType type,  string WebApiUri,string Description)
    {
        await _notice.Open(new NotificationConfig()
        {
            Message = "服务端通知",
            Duration = 0,
            Description = Description,
            NotificationType = type
        });
    }


    private int GetRowSpan(string key, string columnTitle = "")
    {
        Index++;
        if (Index % RowSpanCount == 0)
        {
            return 0;
        }
        return RowSpanCount;
    }

    private void Config(Site data)
    {
        Visible = true;
        Site = data;
    }


    private async Task Recycle(Site data)
    {
        try
        {
            var url = $@"{data.WebApiUri}/api/AppPools/Recycle";
            var poolName = new MultipartFormDataContent();
            poolName.Add(new StringContent(data.PoolName), "appPoolName");
            var result = await Http.PostAsync(url, poolName);
            var resultContent = result.Content.ReadAsStringAsync().Result;
            if (result.IsSuccessStatusCode)
            {
                await _message.Success("操作成功！！！");
            }
            else
            {
                var p = JsonSerializer.Deserialize<PostResonse>(resultContent);
                await _message.Error($@"代码：{p.status}标题：{p.title}");
            }
        }
        catch (Exception ex)
        {
            await _message.Error($@"发生异常！！！{ex.Message}");
        }
    }

    private async Task SiteStateHasChanged(Site data)
    {
        try
        {
            var url = $@"{data.WebApiUri}/api/Sites/Stop";
            if (data.StateValue.Equals(true))
            {
                url = @"/api/Sites/Start";
            }
            var siteName = new MultipartFormDataContent();
            siteName.Add(new StringContent(data.Name), "siteName");
            var result = await Http.PostAsync(url, siteName);
            var resultContent = result.Content.ReadAsStringAsync().Result;
            if (result.IsSuccessStatusCode)
            {
                await _message.Success("操作成功！！！");
            }
            else
            {
                data.StateValue = !data.StateValue;//状态恢复
                var p = JsonSerializer.Deserialize<PostResonse>(resultContent);
                await _message.Error($@"代码：{p.status} 标题：{p.title}");
            }
        }
        catch (Exception ex)
        {
            await _message.Error($@"发生异常！！！{ex.Message}");
        }
    }

    private async Task PoolStateHasChanged(Site data)
    {
        try
        {
            var url = $@"{data.WebApiUri}/api/AppPools/Stop";
            if (data.PoolStateValue.Equals(true))
            {
                url = @"/api/AppPools/Start";
            }
            var poolName = new MultipartFormDataContent();
            poolName.Add(new StringContent(data.PoolName), "appPoolName");
            var result = await Http.PostAsync(url, poolName);
            var resultContent = result.Content.ReadAsStringAsync().Result;
            if (result.IsSuccessStatusCode)
            {
                await _message.Success("操作成功！！！");
            }
            else
            {
                data.PoolStateValue = !data.PoolStateValue;//状态恢复
                var p = JsonSerializer.Deserialize<PostResonse>(resultContent);
                await _message.Error($@"代码：{p.status} 标题：{p.title}");
            }
        }
        catch (Exception ex)
        {
            await _message.Error($@"发生异常！！！{ex.Message}");
        }
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            RowSpanCount = MyProSettings.Value.Servers.Length;
            List.Clear();
            foreach (var item in MyProSettings.Value.Servers)
            {
                try
                {
                    var temp = await Do(item.WebApiUri);
                    List = List.Union(temp).ToList();
                    Console.WriteLine(temp.Count);
                }
                catch (Exception ex)
                {
                    await _message.Error(ex.Message);
                }

            }
            List.Sort((a, b) =>
            {
                var o = a.Name.CompareTo(b.Name);
                return o;
            });
            Loading = false;
            Data = List.ToArray();
        }
        catch (Exception ex)
        {
            Loading = false;
            await _message.Error($@"发生异常！！！{ex.Message}");
        }

    }

}
