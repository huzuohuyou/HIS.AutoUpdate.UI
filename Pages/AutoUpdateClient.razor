@page "/AutoUpdateClient"
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;
@using HIS.AutoUpdate.Blazor.Models;
@inject HttpClient Http
@using System.Text.Json.Serialization
@inject MessageService _message
@using  System.Reflection;
@using Microsoft.Extensions.Options;
@inject IOptionsSnapshot<MyProSettings> MyProSettings;
@*@inject IOptionsSnapshot<Server[]> Servers;*@
<PageContainer Title="更新HIS客户端">
    <Table DataSource="data"  Bordered PageSize="100" ScrollX="1000">
        <Column ColSpan="1" @bind-Field="@context.SettingsSectionName" Width="100"  RowSpan="@GetRowSpan(context.SettingsSectionName)" Title="模块"  SorterMultiple="1" SorterCompare="(a,b)=>a.CompareTo(b)"/>
        <Column ColSpan="1" @bind-Field="@context.IP" Width="80" Title="服务器" />
        <Column ColSpan="1" @bind-Field="@context.CurrentVersionURL" Width="150" Title="版本文件" Ellipsis/>
        <Column ColSpan="1" @bind-Field="@context.ConfigFileName" Width="150" Title="配置文件" Ellipsis />
        <ActionColumn Title="操作" Width="60" Fixed="right">
            <Button Type="primary" Size="small" Shape="round" Icon="upload" OnClick="()=>Config(context)">上传 </Button>

        </ActionColumn>
    </Table>
    <Modal Title="上传文件"
           Visible="@_visible"
           OnOk="@HandleOk"
           OnCancel="@HandleCancel"
           Footer="null">
        <UploadFile ConfigFileName="@configFileName"
                    currentVersionURL="@currentVersionURL"
                    settingsSection="@settingsSection">
        </UploadFile>
    </Modal>
</PageContainer>
@code
{

    #region 弹出框上传

    bool _visible = false;
    string configFileName { get; set; }
    string settingsSection { get; set; }
    string currentVersionURL { get; set; }

    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }
    #endregion

    #region 列表


    Column[] data { get; set; }
    List<Column> list = new List<Column>();
    string tempSettingsSectionName = "";
    int index = 0;
    private int GetRowSpan(string key, string columnTitle = "")
    {
        index++;
        if (index%2==0)
        {
            return 0;
        }
        return 2;


    }

    private PropertyInfo[] GetPropertyInfoArray(Type type)
    {
        PropertyInfo[] props = null;
        try
        {
            object obj = Activator.CreateInstance(type);
            props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance);
        }
        catch (Exception)
        { }
        return props;
    }



    private void Config(Column data)
    {
        _visible = true;
        configFileName = data.ConfigFileName;
        settingsSection = data.SettingsSectionName;
        currentVersionURL = data.CurrentVersionURL;
    }



    public async Task<List<Column>> Do(string WebApiUri)
    {
        var temp = new List<Column>();
        try
        {
            var result = await Http.GetAsync($@"{ WebApiUri}/api/ConfigurationManager");
            if (result.IsSuccessStatusCode)
            {
                string resultContent = result.Content.ReadAsStringAsync().Result;
                var collection = JsonSerializer.Deserialize<CustomSettingHandle[]>(resultContent);

                foreach (var item in collection)
                {
                    foreach (var key in item.SettingsSection.Keys)
                    {
                        temp.Add(new Column
                        {
                            WebApiUri = WebApiUri,
                            ConfigFileName = item.ConfigFileName,
                            MoudleName = key,
                            SettingsSectionName = key,
                            CurrentVersionURL = item.SettingsSection[key]["CurrentVersionURL"].ToString(),

                        });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await _message.Error($@"{WebApiUri}=>{ex.Message}");
        }
        return temp;
        //list = list.Union(temp).ToList(); ;
        //data = list.ToArray();
        //await _message.Info(data.Length.ToString());
    }

    public async Task ConfigurationManagerAsync()
    {
        try
        {
            list.Clear();
            foreach (var item in MyProSettings.Value.Servers)
            {
                try
                {
                    var temp = await Do(item.WebApiUri);
                    list = list.Union(temp).ToList();
                    Console.WriteLine(temp.Count);
                }
                catch (Exception ex)
                {
                    await _message.Error(ex.Message);
                }

            }
            Console.WriteLine("-1");
            list.Sort((a, b) =>
            {
                var o = a.SettingsSectionName.CompareTo(b.SettingsSectionName);
                return o;
            });
            data = list.ToArray();
        }
        catch (Exception ex)
        {
            await _message.Error(ex.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ConfigurationManagerAsync();

    }
    #endregion

}
