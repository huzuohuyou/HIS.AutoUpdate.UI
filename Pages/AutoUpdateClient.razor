@page "/AutoUpdateClient"
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;
@using HIS.AutoUpdate.Blazor.Models;
@inject HttpClient Http
@using System.Text.Json.Serialization
@inject MessageService _message
@using  System.Reflection;

<PageContainer Title="更新HIS客户端">
    <Table DataSource="data" PageSize="100" ScrollX="1000" >
        <Column @bind-Field="@context.MoudleName" Width="80" Title="模组" />
        <Column @bind-Field="@context.SettingsSectionName" Width="100" Title="模块" />
        <Column @bind-Field="@context.CurrentVersionURL" Width="150" Title="版本文件" />
        <Column @bind-Field="@context.ConfigFileName" Width="150" Title="配置文件" Ellipsis />
        <ActionColumn Title="操作" Width="60" Fixed="right">
            <Button Type="primary" Size="small" Shape="round" Icon="upload" OnClick="()=>Config(context)">上传 </Button>

        </ActionColumn>
    </Table>
    <Modal Title="上传文件"
           Visible="@_visible"
           OnOk="@HandleOk"
           OnCancel="@HandleCancel"
           Footer="null">
        <UploadFile ConfigFileName="@configFileName"
                    currentVersionURL="@currentVersionURL"
                    settingsSection="@settingsSection">
        </UploadFile>
    </Modal>
</PageContainer>
@code
{       

    #region 弹出框上传

    bool _visible = false;
    string configFileName { get; set; }
    string settingsSection { get; set; }
    string currentVersionURL { get; set; }

    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }
    #endregion

    #region 列表


    Column[] data { get; set; }

    private PropertyInfo[] GetPropertyInfoArray(Type type)
    {
        PropertyInfo[] props = null;
        try
        {
            object obj = Activator.CreateInstance(type);
            props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance);
        }
        catch (Exception)
        { }
        return props;
    }

    HISClientConfigModel HISModal = new HISClientConfigModel() { settingsSection = new HISSettingsSection() };

    HISClientConfigModel CMITModal { get; set; }

    private void Config(Column data) {
        _visible = true;
        configFileName = data.ConfigFileName;
        settingsSection = data.SettingsSectionName;
        currentVersionURL = data.CurrentVersionURL;
    }

    public async Task ConfigurationManagerAsync()
    {
        try
        {
            var result = await Http.GetAsync($@"/api/ConfigurationManager");
            if (result.IsSuccessStatusCode)
            {
                string resultContent = result.Content.ReadAsStringAsync().Result;
                var r = JsonSerializer.Deserialize<HISClientConfigModel[]>(resultContent);
                if (r[0].configFileName.Contains("HIS.AutoUpdate"))
                {
                    HISModal = r[0];
                    CMITModal = r[1];
                }
                else
                {
                    HISModal = r[1];
                    CMITModal = r[0];
                }

                var array = GetPropertyInfoArray(typeof(HISSettingsSection));
                var list = new List<Column>();
                foreach (var item in array)
                {
                    CurrentVersionURL c = (CurrentVersionURL)HISModal.settingsSection.GetType().GetProperty(item.Name).GetValue(HISModal.settingsSection, null) ?? new CurrentVersionURL();
                    var value = c.GetType().GetProperty("currentVersionURL").GetValue(c, null)?.ToString();
                    if (!string.IsNullOrWhiteSpace(value))
                    {
                        list.Add(new Column
                        {
                            ConfigFileName = HISModal.configFileName,
                            MoudleName = "HIS.AutoUpdate",
                            SettingsSectionName = item.Name,
                            CurrentVersionURL = value,

                        });
                    }
                }

                foreach (var item in array)
                {
                    CurrentVersionURL c = (CurrentVersionURL)CMITModal.settingsSection.GetType().GetProperty(item.Name).GetValue(CMITModal.settingsSection, null) ?? new CurrentVersionURL();
                    var value = c.GetType().GetProperty("currentVersionURL").GetValue(c, null)?.ToString();
                    if (!string.IsNullOrWhiteSpace(value))
                    {
                        list.Add(new Column
                        {
                            ConfigFileName = CMITModal.configFileName,
                            MoudleName = "CMIT.AutoUpdate",
                            SettingsSectionName = item.Name,
                            CurrentVersionURL = value,

                        });
                    }
                }
                data = list.ToArray();
            }
        }
        catch (Exception ex)
        {

            await _message.Error(ex.Message);
        }


    }

    protected override async Task OnInitializedAsync()
    {
        await ConfigurationManagerAsync();

    }
    #endregion

}
