@page "/AutoUpdateClient"
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;
@using HIS.AutoUpdate.Blazor.Models;
@inject HttpClient Http
@using System.Text.Json.Serialization
@inject MessageService _message
@using  System.Reflection;
@using Microsoft.Extensions.Options;
@inject IOptionsSnapshot<MyProSettings> MyProSettings;
@inject NotificationService _notice
@inherits LayoutComponentBase
<PageContainer Title="更新HIS客户端">
    <Spin Spinning=Loading>
        <div style="        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
        background: #e1e1e1;">
            @foreach (var item in Clients)
            {
                <div class="hvr-shutter-out-horizontal">
                    <Card Style="width:262px;margin: 10px;display:block;" Bordered Cover="coverTemplate">
                        <ChildContent>
                            <CardMeta AvatarTemplate="@avatarTemplate" Title="@item.SettingsSectionName" Description="@item.SettingsSectionName" />
                            <div style="text-align: center;padding:10px;">
                                @foreach (var column in item.Columns)
                                {
                                    <Badge Color="green" Text="@column.IP"></Badge>
                                }
                            </div>
                        </ChildContent>
                        <ActionTemplate>
                            <CardAction >
                                <Popover content="配置客户端">
                                    <Icon Type="setting" OnClick="@(()=> Config(item))" />
                                </Popover>
                            </CardAction>
                            @*<CardAction><Icon Type="edit" OnClick="@(()=> Config(item))" /></CardAction>
                            <CardAction><Icon Type="ellipsis" OnClick="@(()=> Config(item))" /></CardAction>*@
                        </ActionTemplate>
                    </Card>
                </div>
            }
        </div>
        <Modal Title="上传文件"
               Visible="@Visible"
               OnOk="@HandleOk"
               OnCancel="@HandleCancel"
               Footer="null">
            <UploadFile Client="@currentClient">
            </UploadFile>
        </Modal>
    </Spin>
</PageContainer>


@code
{

    bool Loading = true;
    bool Visible = false;
    int Index = 0;
    int RowSpanCount = 1;
    string MoudleName = string.Empty;
    string NoticeSuccessKey = "success";
    Column Column = null;
    List<string> IPs = new List<string>();
    Column[] Data { get; set; } = new Column[0];
    List<Column> List = new List<Column>();
    List<Client> Clients = new List<Client>();

    Column currentColumn { get; set; }
    Client currentClient { get; set; }
    RenderFragment avatarTemplate =@<img style="width:20px;" src="/images/客户端管理.png" />;
    RenderFragment coverTemplate = @<img style=" object-fit: cover; height: 70px;" alt="example" src="/images/树图.png" />;

    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        Visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        Visible = false;
    }

    private int GetRowSpan(string key, string columnTitle = "")
    {
        Index++;
        if (Index % RowSpanCount == 0)
        {
            return 0;
        }
        return RowSpanCount;
    }

    private PropertyInfo[] GetPropertyInfoArray(Type type)
    {
        PropertyInfo[] props = null;
        try
        {
            object obj = Activator.CreateInstance(type);
            props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance);
        }
        catch (Exception)
        { }
        return props;
    }

    private void Config(Column data)
    {
        Visible = true;
        currentColumn = data;
    }

    private void Config(Client data)
    {
        Visible = true;
        currentClient = data;
    }

    public async Task<List<Column>> Do(string WebApiUri)
    {
        var temp = new List<Column>();
        try
        {
            var result = await Http.GetAsync($@"{ WebApiUri}/api/ConfigurationManager");
            if (result.IsSuccessStatusCode)
            {
                await NoticeWithIcon(NotificationType.Success, WebApiUri, $@"成功连接服务：{WebApiUri}");
                string resultContent = result.Content.ReadAsStringAsync().Result;
                var collection = JsonSerializer.Deserialize<CustomSettingHandle[]>(resultContent);

                foreach (var item in collection)
                {
                    foreach (var key in item.SettingsSection.Keys)
                    {
                        temp.Add(new Column
                        {
                            WebApiUri = WebApiUri,
                            ConfigFileName = item.ConfigFileName,
                            MoudleName = key,
                            SettingsSectionName = key,
                            CurrentVersionURL = item.SettingsSection[key]["CurrentVersionURL"].ToString(),

                        });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            RowSpanCount--;
            await NoticeWithIcon(NotificationType.Error, WebApiUri, ex.Message.Equals("TypeError: Failed to fetch") ? $@"无法连接到服务:{WebApiUri}" : ex.Message);
        }
        return temp;
    }

    private async Task NoticeWithIcon(NotificationType type, string WebApiUri, string Description,string key="")
    {
        await _notice.Open(new NotificationConfig()
        {
            Key = key,
            Message = "客户端通知",
            Duration = 0,
            Description = Description,
            NotificationType = type
        });
    }

    public async Task<Column[]> ConfigurationManagerAsync()
    {
        try
        {
            List.Clear();
            foreach (var item in MyProSettings.Value.Servers)
            {
                try
                {
                    var temp = await Do(item.WebApiUri);
                    List = List.Union(temp).ToList();
                    Console.WriteLine(temp.Count);
                }
                catch (Exception ex)
                {
                    await _message.Error(ex.Message);
                }
            }
            List.Sort((a, b) =>
            {
                var o = a.SettingsSectionName.CompareTo(b.SettingsSectionName);
                return o;
            });
            Loading = false;
        }
        catch (Exception ex)
        {
            await _message.Error(ex.Message);
        }
        return List.ToArray();
    }

    protected override async Task OnInitializedAsync()
    {
        RowSpanCount = MyProSettings.Value.Servers.Length;
        Data = await ConfigurationManagerAsync();
        var client = new Client("");
        foreach (var item in Data)
        {
            if (item.SettingsSectionName.Equals(client.SettingsSectionName))
            {
                client.Columns.Add(item);
            }
            else
            {
                client = new Client(item.SettingsSectionName);
                client.Columns.Add(item);
                Clients.Add(client);
            }

        }
        //await _notice.Close(NoticeSuccessKey);
    }

}
