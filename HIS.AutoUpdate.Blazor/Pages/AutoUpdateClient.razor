@page "/AutoUpdateClient"
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;
@using HIS.AutoUpdate.Blazor.Models;
@inject HttpClient Http
@using System.Text.Json.Serialization
@using  System.Reflection;
<PageContainer Title="更新HIS客户端">
    <Button Type="primary" OnClick="@ConfigurationManagerAsync">/api/ConfigurationManager</Button>
    <Table DataSource="data" PageSize="100" ScrollX="1000" ScrollY="340px">
        <Column @bind-Field="@context.ConfigFileName" Width="80" Title="系统" />
        <Column @bind-Field="@context.SettingsSectionName" Width="100" Title="模块" />
        <Column @bind-Field="@context.CurrentVersionURL" Width="150" Title="版本文件" />

        <ActionColumn Title="操作" Width="60" Fixed="right">
            <Button OnClick="@(()=>{ _visible = true; })">action</Button>
        </ActionColumn>
    </Table>
    <Modal Title="上传文件"
           Visible="@_visible"
           OnOk="@HandleOk"
           OnCancel="@HandleCancel">
        <UploadFile></UploadFile>
    </Modal>
</PageContainer>
@code
{   bool _visible = false;

    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }
    Column[] data { get; set; }
    void OnSingleCompleted(UploadInfo fileinfo)
    {
        if (fileinfo.File.State == UploadState.Success)
        {
            var result = fileinfo.File.GetResponse<ResponseModel>();
            fileinfo.File.Url = result.url;
        }
    }
    private PropertyInfo[] GetPropertyInfoArray(Type type)
    {
        PropertyInfo[] props = null;
        try
        {
            object obj = Activator.CreateInstance(type);
            props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance);
        }
        catch (Exception)
        { }
        return props;
    }
    HISClientConfigModel HISModal = new HISClientConfigModel() { settingsSection = new HISSettingsSection() };
    HISClientConfigModel CMITModal { get; set; }
    public async Task ConfigurationManagerAsync()
    {
        try
        {
            var result = await Http.GetAsync($@"/api/ConfigurationManager");

            string resultContent = result.Content.ReadAsStringAsync().Result;
            var r = JsonSerializer.Deserialize<HISClientConfigModel[]>(resultContent);
            if (r[0].configFileName.Contains("HIS.AutoUpdate"))
            {
                HISModal = r[0];
                CMITModal = r[1];
                SYSTEM_HIS_Foundations_exe = HISModal?.settingsSection?.SYSTEM_HIS_Foundations_exe?.currentVersionURL;
            }
            else
            {
                HISModal = r[1];
                CMITModal = r[0];
            }

            var array = GetPropertyInfoArray(typeof(HISSettingsSection));
            var list = new List<Column>();
            foreach (var item in array)
            {
                CurrentVersionURL c = (CurrentVersionURL)HISModal.settingsSection.GetType().GetProperty(item.Name).GetValue(HISModal.settingsSection, null)??new CurrentVersionURL();
                var value = c.GetType().GetProperty("currentVersionURL").GetValue(c, null)?.ToString();
                if (!string.IsNullOrWhiteSpace(value))
                {
                    list.Add(new Column
                    {
                        ConfigFileName = "HIS.AutoUpdate",
                        SettingsSectionName = item.Name,
                        CurrentVersionURL = value,

                    });
                }
            }

            //foreach (var item in array)
            //{
            //    CurrentVersionURL c = (CurrentVersionURL)CMITModal.settingsSection.GetType().GetProperty(item.Name).GetValue(CMITModal.settingsSection, null) ?? new CurrentVersionURL();
            //    var value = c.GetType().GetProperty("currentVersionURL").GetValue(c, null)?.ToString();
            //    if (string.IsNullOrWhiteSpace(value))
            //    {
            //        list.Add(new Column
            //        {
            //            ConfigFileName = "HIS.AutoUpdate",
            //            SettingsSectionName = item.Name,
            //            CurrentVersionURL = value,

            //        });
            //    }
            //}
            data =list.ToArray();
        }
        catch (Exception ex)
        {

            throw ex;
        }


    }



    protected override async Task OnInitializedAsync()
    {
        await ConfigurationManagerAsync();

    }

    string SYSTEM_HIS_Foundations_exe { get; set; }

    RenderFragment extra =@<div @onclick:stopPropagation><Icon Type="setting"></Icon></div>;

string expandIconPosition = "left";

void Callback(string[] keys)
{
Console.WriteLine(string.Join(',', keys));
}
}